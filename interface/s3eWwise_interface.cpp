/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eWwise.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef    s3eBool(*s3eWwiseMemoryMgrIsInitialized_t)();
typedef       void(*s3eWwiseMemoryMgrTerm_t)();
typedef  s3eResult(*s3eWwiseMemoryMgrInit_t)(s3eWwiseMemSettings* in_pSettings);
typedef s3eWwiseStreamMgr*(*s3eWwiseStreamMgrCreate_t)(s3eWwiseStreamMgrSettings* in_settings);
typedef       void(*s3eWwiseStreamMgrDestroy_t)(s3eWwiseStreamMgr* streamMgr);
typedef       void(*s3eWwiseStreamMgrGetDefaultSettings_t)(s3eWwiseStreamMgrSettings* out_settings);
typedef    s3eBool(*s3eWwiseSoundEngineIsInitialized_t)();
typedef  s3eResult(*s3eWwiseSoundEngineInit_t)(s3eWwiseInitSettings* in_pSettings, s3eWwisePlatformInitSettings* in_pPlatformSettings);
typedef       void(*s3eWwiseSoundEngineGetDefaultInitSettings_t)(s3eWwiseInitSettings* out_settings);
typedef       void(*s3eWwiseSoundEngineGetDefaultPlatformInitSettings_t)(s3eWwisePlatformInitSettings* out_settings);
typedef       void(*s3eWwiseSoundEngineTerm_t)();
typedef  s3eResult(*s3eWwiseSoundEngineRenderAudio_t)();
typedef s3eWwisePlayingID(*PostEvent_t)(const char* in_pszEventName, s3eWwiseGameObjectID in_gameObjectID);
typedef  s3eResult(*s3eWwiseSoundEngineRegisterGameObj_t)(s3eWwiseGameObjectID in_gameObjectID, const char* in_pszObjName);
typedef  s3eResult(*s3eWwiseSoundEngineUnregisterGameObj_t)(s3eWwiseGameObjectID in_gameObjectID);
typedef  s3eResult(*s3eWwiseSoundEngineUnregisterAllGameObj_t)();
typedef  s3eResult(*s3eWwiseSoundEngineLoadBank_t)(const char* in_pszString, s3eWwiseMemPoolId in_memPoolId);
typedef  s3eResult(*s3eWwiseSoundEngineUnloadBank_t)(const char* in_pszString);
typedef  s3eResult(*s3eWwiseMusicEngineInit_t)(s3eWwiseMusicSettings* in_pSettings);
typedef       void(*s3eWwsieMusicEngineGetDefaultInitSettings_t)(s3eWwiseMusicSettings* out_settings);
typedef       void(*s3eWwiseMusicEngineTerm_t)();

/**
 * struct that gets filled in by s3eWwiseRegister
 */
typedef struct s3eWwiseFuncs
{
    s3eWwiseMemoryMgrIsInitialized_t m_s3eWwiseMemoryMgrIsInitialized;
    s3eWwiseMemoryMgrTerm_t m_s3eWwiseMemoryMgrTerm;
    s3eWwiseMemoryMgrInit_t m_s3eWwiseMemoryMgrInit;
    s3eWwiseStreamMgrCreate_t m_s3eWwiseStreamMgrCreate;
    s3eWwiseStreamMgrDestroy_t m_s3eWwiseStreamMgrDestroy;
    s3eWwiseStreamMgrGetDefaultSettings_t m_s3eWwiseStreamMgrGetDefaultSettings;
    s3eWwiseSoundEngineIsInitialized_t m_s3eWwiseSoundEngineIsInitialized;
    s3eWwiseSoundEngineInit_t m_s3eWwiseSoundEngineInit;
    s3eWwiseSoundEngineGetDefaultInitSettings_t m_s3eWwiseSoundEngineGetDefaultInitSettings;
    s3eWwiseSoundEngineGetDefaultPlatformInitSettings_t m_s3eWwiseSoundEngineGetDefaultPlatformInitSettings;
    s3eWwiseSoundEngineTerm_t m_s3eWwiseSoundEngineTerm;
    s3eWwiseSoundEngineRenderAudio_t m_s3eWwiseSoundEngineRenderAudio;
    PostEvent_t m_PostEvent;
    s3eWwiseSoundEngineRegisterGameObj_t m_s3eWwiseSoundEngineRegisterGameObj;
    s3eWwiseSoundEngineUnregisterGameObj_t m_s3eWwiseSoundEngineUnregisterGameObj;
    s3eWwiseSoundEngineUnregisterAllGameObj_t m_s3eWwiseSoundEngineUnregisterAllGameObj;
    s3eWwiseSoundEngineLoadBank_t m_s3eWwiseSoundEngineLoadBank;
    s3eWwiseSoundEngineUnloadBank_t m_s3eWwiseSoundEngineUnloadBank;
    s3eWwiseMusicEngineInit_t m_s3eWwiseMusicEngineInit;
    s3eWwsieMusicEngineGetDefaultInitSettings_t m_s3eWwsieMusicEngineGetDefaultInitSettings;
    s3eWwiseMusicEngineTerm_t m_s3eWwiseMusicEngineTerm;
} s3eWwiseFuncs;

static s3eWwiseFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xe7657fff, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eWwise");
            
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xe7657fff, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eWwiseAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eBool s3eWwiseMemoryMgrIsInitialized()
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[0] func: s3eWwiseMemoryMgrIsInitialized"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eWwiseMemoryMgrIsInitialized();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eWwiseMemoryMgrTerm()
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[1] func: s3eWwiseMemoryMgrTerm"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eWwiseMemoryMgrTerm();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

s3eResult s3eWwiseMemoryMgrInit(s3eWwiseMemSettings* in_pSettings)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[2] func: s3eWwiseMemoryMgrInit"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eWwiseMemoryMgrInit(in_pSettings);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eWwiseStreamMgr* s3eWwiseStreamMgrCreate(s3eWwiseStreamMgrSettings* in_settings)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[3] func: s3eWwiseStreamMgrCreate"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eWwiseStreamMgr* ret = g_Ext.m_s3eWwiseStreamMgrCreate(in_settings);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eWwiseStreamMgrDestroy(s3eWwiseStreamMgr* streamMgr)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[4] func: s3eWwiseStreamMgrDestroy"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eWwiseStreamMgrDestroy(streamMgr);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eWwiseStreamMgrGetDefaultSettings(s3eWwiseStreamMgrSettings* out_settings)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[5] func: s3eWwiseStreamMgrGetDefaultSettings"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eWwiseStreamMgrGetDefaultSettings(out_settings);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

s3eBool s3eWwiseSoundEngineIsInitialized()
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[6] func: s3eWwiseSoundEngineIsInitialized"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eWwiseSoundEngineIsInitialized();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eWwiseSoundEngineInit(s3eWwiseInitSettings* in_pSettings, s3eWwisePlatformInitSettings* in_pPlatformSettings)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[7] func: s3eWwiseSoundEngineInit"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eWwiseSoundEngineInit(in_pSettings, in_pPlatformSettings);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eWwiseSoundEngineGetDefaultInitSettings(s3eWwiseInitSettings* out_settings)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[8] func: s3eWwiseSoundEngineGetDefaultInitSettings"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eWwiseSoundEngineGetDefaultInitSettings(out_settings);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eWwiseSoundEngineGetDefaultPlatformInitSettings(s3eWwisePlatformInitSettings* out_settings)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[9] func: s3eWwiseSoundEngineGetDefaultPlatformInitSettings"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eWwiseSoundEngineGetDefaultPlatformInitSettings(out_settings);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eWwiseSoundEngineTerm()
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[10] func: s3eWwiseSoundEngineTerm"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eWwiseSoundEngineTerm();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

s3eResult s3eWwiseSoundEngineRenderAudio()
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[11] func: s3eWwiseSoundEngineRenderAudio"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eWwiseSoundEngineRenderAudio();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eWwisePlayingID PostEvent(const char* in_pszEventName, s3eWwiseGameObjectID in_gameObjectID)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[12] func: PostEvent"));

    if (!_extLoad())
        return S3E_WWISE_INVALID_PLAYING_ID;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eWwisePlayingID ret = g_Ext.m_PostEvent(in_pszEventName, in_gameObjectID);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eWwiseSoundEngineRegisterGameObj(s3eWwiseGameObjectID in_gameObjectID, const char* in_pszObjName)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[13] func: s3eWwiseSoundEngineRegisterGameObj"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eWwiseSoundEngineRegisterGameObj(in_gameObjectID, in_pszObjName);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eWwiseSoundEngineUnregisterGameObj(s3eWwiseGameObjectID in_gameObjectID)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[14] func: s3eWwiseSoundEngineUnregisterGameObj"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eWwiseSoundEngineUnregisterGameObj(in_gameObjectID);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eWwiseSoundEngineUnregisterAllGameObj()
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[15] func: s3eWwiseSoundEngineUnregisterAllGameObj"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eWwiseSoundEngineUnregisterAllGameObj();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eWwiseSoundEngineLoadBank(const char* in_pszString, s3eWwiseMemPoolId in_memPoolId)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[16] func: s3eWwiseSoundEngineLoadBank"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eWwiseSoundEngineLoadBank(in_pszString, in_memPoolId);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eWwiseSoundEngineUnloadBank(const char* in_pszString)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[17] func: s3eWwiseSoundEngineUnloadBank"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eWwiseSoundEngineUnloadBank(in_pszString);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eWwiseMusicEngineInit(s3eWwiseMusicSettings* in_pSettings)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[18] func: s3eWwiseMusicEngineInit"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eWwiseMusicEngineInit(in_pSettings);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eWwsieMusicEngineGetDefaultInitSettings(s3eWwiseMusicSettings* out_settings)
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[19] func: s3eWwsieMusicEngineGetDefaultInitSettings"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eWwsieMusicEngineGetDefaultInitSettings(out_settings);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eWwiseMusicEngineTerm()
{
    IwTrace(WWISE_VERBOSE, ("calling s3eWwise[20] func: s3eWwiseMusicEngineTerm"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eWwiseMusicEngineTerm();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
