/*
 * (C) 2001-2012 Marmalade. All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Marmalade.
 *
 * This file consists of source code released by Marmalade under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_WWISE_H
#define S3E_EXT_WWISE_H

#include "s3eTypes.h"

/**
 * AK Common Types
 */
typedef uint32 s3eWwiseUniqueID;
static const s3eWwiseUniqueID S3E_WWISE_INVALID_UNIQUE_ID = 0;

typedef int32 s3eWwiseMemPoolId;
static const s3eWwiseMemPoolId S3E_WWISE_INVALID_POOL_ID = -1;
static const s3eWwiseMemPoolId S3E_WWISE_DEFAULT_POOL_ID = -1;

typedef uint32* s3eWwiseGameObjectID;
static const s3eWwiseGameObjectID S3E_WWISE_INVALID_GAME_OBJECT = (s3eWwiseGameObjectID)-1;

typedef uint32 s3eWwisePlayingID;
static const s3eWwisePlayingID S3E_WWISE_INVALID_PLAYING_ID = S3E_WWISE_INVALID_UNIQUE_ID;

/**
 * AK::MemoryMgr
 */
struct s3eWwiseMemSettings
{
	uint32 uMaxNumPools;
};

/**
 * AK::StreamMgr
 */
struct s3eWwiseStreamMgrSettings
{
	uint32 uMemorySize;
};

/**
 * AK::SoundEngine
 */
typedef void (*s3eWwiseAssertHook)(const char *in_pszExpression, const char *in_pszFileName, int in_lineNumber);
 
struct s3eWwiseInitSettings
{
	s3eWwiseAssertHook pfnAssertHook;
	uint32 uMaxNumPaths;
	uint32 uMaxNumTransitions;
	uint32 uDefaultPoolSize;
	float fDefaultPoolRatioThreshold;
	uint32 uCommandQueueSize;
	s3eWwiseMemPoolId uPrepareEventMemoryPoolID;
	s3eBool bEnableGameSyncPreperation;
	uint32 uContinuousPlaybackLookAhead;
	uint32 uMonitorPoolSize;
	uint32 uMonitorQueuePoolSize;
};

struct s3eWwisePlatformInitSettings
{
	// Missing: s3eWwiseThreadProperties threadLEngine;
	// Missing: s3eWwiseThreadProperties threadBankManager;
	// Missing: s3eWwiseThreadProperties threadMonitor;
	float fLEngineDefaultPoolRatioThreshold;
	uint32 uLEngineDefaultPoolSize;
	uint32 uSampleRate;
	uint16 uNumRefillsInVoice;
	s3eBool bMuteOtherApps;
};

/**
 * AK::MusicEngine
 */
struct s3eWwiseMusicSettings
{
	float fStreamingLookAheadRatio;
};
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the Wwise extension is available.
 */
s3eBool s3eWwiseAvailable();

/**
 * AK::MemoryMgr
 */
s3eBool s3eWwiseMemoryMgrIsInitialized();

void s3eWwiseMemoryMgrTerm();

s3eResult s3eWwiseMemoryMgrInit(s3eWwiseMemSettings* in_pSettings);

/**
 * AK::StreamMgr
 */
s3eResult s3eWwiseStreamMgrCreate(s3eWwiseStreamMgrSettings* in_settings);

void s3eWwiseStreamMgrDestroy();

void s3eWwiseStreamMgrGetDefaultSettings(s3eWwiseStreamMgrSettings* out_settings);

/**
 * AK::SoundEngine
 */
s3eBool s3eWwiseSoundEngineIsInitialized();

s3eResult s3eWwiseSoundEngineInit(s3eWwiseInitSettings* in_pSettings, s3eWwisePlatformInitSettings* in_pPlatformSettings);

void s3eWwiseSoundEngineGetDefaultInitSettings(s3eWwiseInitSettings* out_settings);

void s3eWwiseSoundEngineGetDefaultPlatformInitSettings(s3eWwisePlatformInitSettings* out_settings);

void s3eWwiseSoundEngineTerm();

s3eResult s3eWwiseSoundEngineRenderAudio();

s3eWwisePlayingID PostEvent(const char* in_pszEventName, s3eWwiseGameObjectID in_gameObjectID);

s3eResult s3eWwiseSoundEngineRegisterGameObj(s3eWwiseGameObjectID in_gameObjectID, const char* in_pszObjName = NULL);

s3eResult s3eWwiseSoundEngineUnregisterGameObj(s3eWwiseGameObjectID in_gameObjectID);

s3eResult s3eWwiseSoundEngineUnregisterAllGameObj();

s3eResult s3eWwiseSoundEngineLoadBank(const char* in_pszString, s3eWwiseMemPoolId in_memPoolId);

s3eResult s3eWwiseSoundEngineUnloadBank(const char* in_pszString);

/**
 * AK::MusicEngine
 */
s3eResult s3eWwiseMusicEngineInit(s3eWwiseMusicSettings* in_pSettings);

void s3eWwsieMusicEngineGetDefaultInitSettings(s3eWwiseMusicSettings* out_settings);

void s3eWwiseMusicEngineTerm();

S3E_END_C_DECL

#endif /* !S3E_EXT_WWISE_H */
