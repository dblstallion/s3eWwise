# mkf file for building extension s3eWwise.
# NOTE: This file was originally written by the extension builder, but will not
# be overwritten (unless --force is specified) and is intended to be modified.
display_name "Extensions/s3eWwise"

includepath Wwise/SDK/include
includepath source/h
includepath h
includepath Wwise/SDK/samples/SoundEngine/Common

defines
{
    #Define the verbose channel to be off by default (but controllable by icf)
    IW_TRACE_CHANNEL_WWISE_VERBOSE=2

    #This macro indicates that this extension is being built
    S3E_EXT_WWISE
}

#NOTE: Don't run this because it will overwrite custom files
#This command re-generates the relevant source files from the s4e when
#the mkb is run
#extension
#{
#    ("$MARMALADE_ROOT/extensions/builder")
#    "make_extension s3eWwise.s4e"
#}

#include the extension builder subproject
subproject "$MARMALADE_ROOT/s3e/edk"

if {{defined I3D_OS_IPHONE}}
{
	includepath Wwise/SDK/samples/SoundEngine/POSIX
	
    files
    {
        ["source"]
        (use_first_found, source/iphone, source/generic, Wwise/SDK/samples/SoundEngine/POSIX)
        s3eWwise_platform.mm
		
		AkDefaultIOHookBlocking.cpp
        AkDefaultIOHookDeferred.cpp
    }
}

if {{defined I3D_OS_WINDOWS}}
{
	includepath Wwise/SDK/samples/SoundEngine/Win32
	
    files
    {
        ["source"]
        (use_first_found, source/windows, source/generic, Wwise/SDK/samples/SoundEngine/Win32)
        s3eWwise_platform.cpp
        #Add any windows-specific files here
		
		AkDefaultIOHookBlocking.cpp
        AkDefaultIOHookDeferred.cpp
    }
	
	librarypath source/lib/win32

	librarys
	{
		User32.lib
		Ole32.lib
		Ws2_32.lib
		dxguid.lib
		dsound.lib
		AkMemoryMgr.lib
		AkMusicEngine.lib
		AkSoundEngine.lib
		AkStreamMgr.lib
	}
}

if {{defined S3E_ANDROID}}
{
	includepath Wwise/SDK/samples/SoundEngine/POSIX

    files
    {
        ["source"]
        (use_first_found, source/android, source/generic, Wwise/SDK/samples/SoundEngine/POSIX)
        s3eWwise_platform.cpp
        #Add any android-specific files here
		
		AkDefaultIOHookBlocking.cpp
        AkDefaultIOHookDeferred.cpp
    }
}

if {{defined I3D_OS_OSX}}
{
	includepath Wwise/SDK/samples/SoundEngine/POSIX
	
    files
    {
        ["source"]
        (use_first_found, source/osx, source/generic, Wwise/SDK/samples/SoundEngine/POSIX)
        s3eWwise_platform.mm
        #Add any osx-specific files here
		
		AkDefaultIOHookBlocking.cpp
        AkDefaultIOHookDeferred.cpp
    }
}

if {{defined I3D_OS_LINUX and not defined S3E_ANDROID}}
{
    files
    {
        ["source"]
        (use_first_found, source/linux, source/generic)
        s3eWwise_platform.cpp
        #Add any linux-specific files here
    }
}

files
{
    # Add any platform-independent files here
    # Note that if the file exists in the platform-specific directory
    # it will be taken from there instead of 'generic'
    s3eWwise_register.cpp
    s3eWwise.cpp
	s3eIOHook.cpp
	
    (Wwise/SDK/samples/SoundEngine/Common)
    AkDefaultLowLevelIODispatcher.cpp
    AkFileLocationBase.cpp
	AkFilePackage.cpp
	AkFilePackageLUT.cpp

    ["h"]
    (source/h)
    s3eWwise_internal.h
    s3eWwise_autodefs.h
    s3eIOHook.h
    
	(WWise/SDK/samples/SoundEngine/Common)
    AkDefaultLowLevelIODispatcher.h
    AkFileLocationBase.h
    AkFilePackage.h
    AkFilePackageLUT.h
	
    ["docs"]
    (interface)
    s3eWwise.defines.txt

    []
    (.)
    s3eWwise.s4e
}
